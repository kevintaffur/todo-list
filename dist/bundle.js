(()=>{"use strict";class t{constructor(t,e){this.title=t,this.description=e,this.todos=[]}getTitle(){return this.title}setTitle(t){this.title=t}getDescription(){return this.description}setDescription(t){this.description=t}addTodoToProject(t){this.todos.push(t)}}class e{static instance=null;projects;memory;constructor(){if(e.instance)return e.instance;if(e.instance=this,this.projects=[],this.memory=localStorage.getItem("projects"),this.memory)JSON.parse(memory).forEach((t=>this.projects.push(t)));else{const e=new t("default project","default project");this.projects.push(e),localStorage.setItem("projects",JSON.stringify(this.projects))}}getProjets(){return this.projects}saveState(){localStorage.setItem("projects",JSON.stringify(this.projects))}}new class{projectRepository;constructor(){this.projectRepository=new e}addProject(t){this.projectRepository.getProjets().push(t),this.projectRepository.saveState()}getAllProjects(){return this.projectRepository.getProjets()}getProject(t){return this.projectRepository.getProjets()[t]}removeProject(t){this.projectRepository.getProjets().splice(t,1),this.projectRepository.saveState()}updateProject(t,e){const s={...this.projectRepository.getProjets()[t],title:e.title,description:e.description};this.projectRepository.getProjets()[t]=s,this.projectRepository.saveState()}}})();